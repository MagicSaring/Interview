回答一:
1.全局静态变量:
内存中的位置:静态存储区
初始化:自动初始化为0
作用域:全局静态变量在声明他的文件之外是不可见的,准确地说是从定义之处开始,到文件结尾.

2.局部静态变量:
内存中的位置:静态存储区
初始化:自动初始化为0
作用域：作用域仍为局部作用域,当定义它的函数或者语句块结束的时候,作用域结束.
但是当局部静态变量离开作用域后,并没有销毁,而是仍然驻留在内存当中,只不过我们不能再对它进行访问,
直到该函数再次被调用,并且值不变.

3.静态函数:
静态函数只是在声明他的文件当中可见，不能被其他文件所用。
这个函数只可在本cpp内使用,不会同其他cpp中的同名函数引起冲突.

4.类的静态成员
静态成员是类的所有对象中共享的成员,而不是某个对象的成员.
对多个对象来说,静态数据成员只存储一处,供所有对象共用.

5.类的静态成员函数
静态成员函数和静态数据成员一样,它们都属于类的静态成员,它们都不是对象成员.
因此,对静态成员的引用不需要用对象名.
在静态成员函数的实现中不能直接引用类中说明的非静态成员,
可以引用类中说明的静态成员(这点非常重要).
如果静态成员函数中要引用非静态成员时,可通过对象来引用.

回答二:
对于函数定义和代码块之外的变量声明,static修改标识符的链接属性,由默认的external变为internal,作用域和存储类型不改变,
这些符号只能在声明它们的源文件中访问.

对于代码块内部的变量声明,static修改标识符的存储类型,由自动变量改为静态变量,作用域和链接属性不变.
这种变量在程序执行之前就创建,在程序执行的整个周期都存在.

对于被static修饰的普通函数,其只能在定义它的源文件中使用,不能在其他源文件中被引用

对于被static修饰的类成员变量和成员函数,它们是属于类的,而不是某个对象,所有对象共享一个静态成员.
静态成员通过<类名>::<静态成员>来使用.

回答三:
1.加了static关键字的全局变量只能在本文件中使用.例如在a.c中定义了static int a=10;那么在b.c中用extern int a是拿不到a的值得,a的作用域只在a.c中。 
2.static定义的静态局部变量分配在数据段上,普通的局部变量分配在栈上,会因为函数栈帧的释放而被释放掉.
3. 对一个类中成员变量和成员函数来说,加了static关键字,则此变量/函数就没有了this指针了,必须通过类名才能访问