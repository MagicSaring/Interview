多态分为静态多态和动态多态
静态多态:主要是重载,在编译的时候就已经确定

动态多态:用虚函数机制实现,在运行期间动态绑定

举个例子：一个父类类型的指针指向一个子类对象时候,使用父类的指针去调用子类中重写了的父类中的虚函数的时候,
会调用子类重写过后的函数,在父类中声明为加了virtual关键字的函数,在子类中重写时候不需要加virtual也是虚函数.
虚函数的实现:在有虚函数的类中,类的最开始部分是一个虚函数表的指针,这个指针指向一个虚函数表.
表中放了虚函数的地址,实际的虚函数在代码段(.text)中.
当子类继承了父类的时候也会继承其虚函数表,当子类重写父类中虚函数时候,会将其继承到的虚函数表中的地址替换为重新写的函数地址.
使用了虚函数,会增加访问内存开销,降低效率.

虚函数和函数重载都实现了C++的多态性，但表现形式不一样，函数重载调用根据参数个数、参数类型等进行区分，而虚函数则是根据动态联编来确定调用什么