管道:
通常指无名管道,是UNIX系统IPC最古老的形式

特点:
1.它是半双工(即数据只能在一个方向上流动),具有固定的读端和写端
2.它只能用于亲缘关系的进程之间的通信(父子进程或者兄弟进程之间)
3.它可以看成一种特殊的文件,对于它的读写也可以使用普通的read、write等函数.但它不是普通的文件,并不属于其他任何文件系统,并且只存在于内存中

原型:
#include<unistd.h>
int pipe(int fd[2]);	//返回值:若成功返回0,失败返回-1

当一个管道建立时,它会创建两个文件描述符 fd[0]为读而打开,fd[1]为写而打开.
要关闭管道只需将这两个文件描述符关闭即可.

单个进程中的管道几乎没有任何用处.所以,通常调用pipe的进程接着调用 fork,这样就创建了父进程与子进程之间的IPC通道

若要数据流从父进程流向子进程,则关闭父进程的读端(fd[0])与子进程的写端(fd[1]),反之,则可以使数据流从子进程流向父进程.

FIFO,也称为命名管道,它是一种文件类型
特点:
1.FIFO可以在无关进程之间交换数据,与无名管道不同
2.FIFO有路劲名与之相关联,它以一种特殊设备文件形式存在于文件系统中

原型:
#include<sys/stat.h>
int mkfifo(const char *pathname, mode_t mode);	//返回值:若成功返回0,失败返回-1
其中的mode参数与open函数中的mode相同,一旦创建了一个FIFO,就可以用一般的文件I/O函数操作它
当open一个FIFO时,是否设置非阻塞标志(O_NONBLOCK)的区别:

若没有指定O_NONBLOCK(默认),只读open要阻塞到某个其他进程为写而打开此FIFO.类似的,只写open要阻塞到某个其他进程为读而打开它
若指定了O_NONBLOCK,则只读open立即返回.而只写open将出错返回 -1 如果没有进程已经为读而打开该FIFO,其errno置ENXIO