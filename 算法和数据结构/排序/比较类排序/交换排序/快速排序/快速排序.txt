快速排序（Quick Sort）
快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，
则可分别对这两部分记录继续进行排序，以达到整个序列有序。
算法描述
快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：

1）从数列中挑出一个元素，称为 “基准”（pivot）；
2）重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。
在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；
3）递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。

代码实现：
//快速排序
template<typename T>
int partition(T arr[], int low, int high)
{
	//基准元素
	T tmp = arr[low];
	while (low < high)
	{
		// 当队尾的元素大于等于基准数据时,向前挪动high指针
		while (low < high && arr[high] >= tmp)
		{
			high--;
		}

		// 如果队尾元素小于tmp了,需要将其赋值给low
		arr[low] = arr[high];

		// 当队首元素小于等于tmp时,向前挪动low指针
		while (low < high && arr[low] <= tmp)
		{
			low++;
		}

		// 当队首元素大于tmp时,需要将其赋值给high
		arr[high] = arr[low];
	}

	arr[low] = tmp;
	return low;
}

template<typename T>
void quickSort(T arr[], int low, int high)
{
    if (low < high)
    {
        int index = partition(arr, low, high);
        quickSort(arr, low, index);
        quickSort(arr, index + 1, high);
    }
}
